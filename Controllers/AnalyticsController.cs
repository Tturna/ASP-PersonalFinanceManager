using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using PersonalFinances.Models.Enums;
using PersonalFinances.Models.ViewModels;
using PersonalFinances.Services;

namespace PersonalFinances.Controllers;

[Authorize]
public class AnalyticsController(AppDbContext dbContext, ReoccurrenceService reoccurrenceService) : Controller
{
    [HttpGet]
    public async Task<IActionResult> Index()
    {
        var userName = User.FindFirstValue(ClaimTypes.NameIdentifier)!;

        // user can't be null because of the [Authorize] attribute
        var userWithTransactions = dbContext.Users
            .Include(t => t.TransactionModels)
            .FirstOrDefault(t => t.Username == userName)!;
        
        // TODO: Refactor this and FinanceController to use a shared method for updating reoccurring transactions.
        // Consider a service or some helper thing.

        // Update reoccurring transactions
        var namedTransactionGroups = userWithTransactions.TransactionModels
            .OrderByDescending(t => t.Date)
            .GroupBy(t => t.Name)
            .ToList();
        
        var todayDate = DateOnly.FromDateTime(DateTime.Now);

        foreach (var namedGroup in namedTransactionGroups)
        {
            var newestTransaction = namedGroup.First();
            var reoccurrence = newestTransaction.Reoccurrence;
            
            if (reoccurrence is null or Reoccurrence.None)
            {
                continue;
            }

            var trDate = newestTransaction.Date;
            var newDate = reoccurrenceService.GetNextReoccurrenceDate(trDate, (Reoccurrence)reoccurrence);
            var dayDifference = todayDate.DayNumber - newDate.DayNumber;

            while (dayDifference > 0)
            {
                var newTransactionReoc = newestTransaction.Clone(newDate);
                newTransactionReoc.IsAutoGenerated = true;
                
                dbContext.Transactions.Add(newTransactionReoc);
                userWithTransactions.TransactionModels.Add(newTransactionReoc);
                
                newDate = reoccurrenceService.GetNextReoccurrenceDate(newDate, (Reoccurrence)reoccurrence);
                dayDifference = todayDate.DayNumber - newDate.DayNumber;
            }
        }

        try
        {
            await dbContext.SaveChangesAsync();
        }
        catch
        {
            ViewBag.errorMessage = "Something went wrong updating the transactions.";
        }
        
        var analyticsViewModel = new AnalyticsViewModel(userWithTransactions);

        return View(analyticsViewModel);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> SetMonthlySavingGoal([Bind("SavingGoal")] AnalyticsViewModel analyticsViewModel)
    {
        if (!ModelState.IsValid)
        {
            return View("Index", new AnalyticsViewModel());
        }
        
        var userName = User.FindFirstValue(ClaimTypes.NameIdentifier)!;
        var user = dbContext.Users.FirstOrDefault(u => u.Username == userName)!;
        
        user.MonthlySavingGoal = analyticsViewModel.SavingGoal.MonthlySavingGoal;

        try
        {
            await dbContext.SaveChangesAsync();
            return RedirectToAction("Index");
        }
        catch
        {
            ModelState.AddModelError("MonthlySavingGoal", "Failed to save the monthly saving goal.");
            return View("Index", new AnalyticsViewModel());
        }
    }
}