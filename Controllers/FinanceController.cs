using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using PersonalFinances.Models;
using PersonalFinances.Models.DataTransferObjects;
using PersonalFinances.Models.Enums;
using PersonalFinances.Models.ViewModels;
using PersonalFinances.Services;

namespace PersonalFinances.Controllers;

[Authorize]
public class FinanceController(AppDbContext dbContext, ReoccurrenceService reoccurrenceService) : Controller
{
    public IActionResult Index()
    {
        var userName = User.FindFirstValue(ClaimTypes.NameIdentifier)!;

        // user can't be null because of the [Authorize] attribute
        var userTransactions = dbContext.Transactions
            .Include(t => t.UserModel)
            .Where(t => t.UserModel.Username == userName)
            .ToList();
        
        // Update reoccurring transactions
        var namedTransactionGroups = userTransactions
            .OrderByDescending(t => t.Date)
            .GroupBy(t => t.Name)
            .ToList();
        
        var todayDate = DateOnly.FromDateTime(DateTime.Now);

        foreach (var namedGroup in namedTransactionGroups)
        {
            var newestTransaction = namedGroup.First();
            var reoccurrence = newestTransaction.Reoccurrence;
            
            if (reoccurrence is null or Reoccurrence.None)
            {
                continue;
            }

            var trDate = newestTransaction.Date;
            var newDate = reoccurrenceService.GetNextReoccurrenceDate(trDate, (Reoccurrence)reoccurrence);
            var dayDifference = todayDate.DayNumber - newDate.DayNumber;

            while (dayDifference > 0)
            {
                var newTransactionReoc = newestTransaction.Clone(newDate);
                newTransactionReoc.IsAutoGenerated = true;
                
                dbContext.Transactions.Add(newTransactionReoc);
                userTransactions.Add(newTransactionReoc);
                
                newDate = reoccurrenceService.GetNextReoccurrenceDate(newDate, (Reoccurrence)reoccurrence);
                dayDifference = todayDate.DayNumber - newDate.DayNumber;
            }
        }
        
        dbContext.SaveChanges();
        var financeViewModel = new FinanceViewModel(userTransactions);

        return View(financeViewModel);
    }

    public IActionResult AddTransaction()
    {
        return View();
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> AddTransaction(TransactionDto transactionData)
    {
        if (!ModelState.IsValid)
        {
            return View(transactionData);
        }

        var userName = User.FindFirstValue(ClaimTypes.NameIdentifier)!;

        // user can't be null because of the [Authorize] attribute
        var userWithTransactions = dbContext.Users
            .Include(u => u.TransactionModels)
            .FirstOrDefault(u => u.Username == userName);

        var existingTransaction = userWithTransactions!.TransactionModels
            .FirstOrDefault(t => t.Name == transactionData.Name);

        if (existingTransaction != null)
        {
            ModelState.AddModelError("Name", "Transaction with this name already exists");
            return View(transactionData);
        }

        var todayDate = DateOnly.FromDateTime(DateTime.Now);
        var date = transactionData.Date == default ? todayDate : transactionData.Date;

        var newTransaction = new TransactionModel
        {
            UserModel = userWithTransactions,
            UserModelId = userWithTransactions.Id,
            IsIncome = transactionData.IsIncome,
            AmountEuro = transactionData.AmountEuro,
            Name = transactionData.Name,
            Date = date,
            Category = transactionData.Category,
            Reoccurrence = transactionData.Reoccurrence
        };
        
        dbContext.Transactions.Add(newTransaction);
        userWithTransactions.TransactionModels.Add(newTransaction);
        
        var stateChanges = await dbContext.SaveChangesAsync();

        if (stateChanges == 0)
        {
            ModelState.AddModelError(string.Empty, "Something went wrong saving the transaction. Please try again.");
            return View(transactionData);
        }

        return RedirectToAction("AddTransaction");
    }
}